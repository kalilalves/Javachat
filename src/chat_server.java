
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.InputStreamReader;
import java.io.UTFDataFormatException;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.URL;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author SEAGUL
 */
public class chat_server extends javax.swing.JFrame {

    /**
     * Creates new form chat_server
     */
    static ServerSocket ss; //Socket do servidor
    static Socket s; //Socket de conexão ao servidor
    static DataInputStream din; //Variavel de entrada de dados
    static DataOutputStream dout; //Variavel de saida de dados
    static String nickname = "Server: "; //Nome do cliente do servidor
    static String ips = myip(); //Metodo para encontrar ip local e publico

    public chat_server() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        msg_area = new javax.swing.JTextArea();
        msg_text = new javax.swing.JTextField();
        msg_send = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Servidor");
        setName("Servidor"); // NOI18N
        setResizable(false);

        msg_area.setEditable(false);
        msg_area.setColumns(20);
        msg_area.setRows(5);
        jScrollPane1.setViewportView(msg_area);

        msg_text.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                msg_textKeyPressed(evt);
            }
        });

        msg_send.setText("Enviar");
        msg_send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                msg_sendActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(msg_text)
                        .addGap(18, 18, 18)
                        .addComponent(msg_send)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(msg_text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(msg_send))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void msg_sendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_msg_sendActionPerformed
        try {
            String msgout = ""; //Inicia limpando a variavel que ira receber o texto a ser enviado
            msgout = nickname + msg_text.getText().trim(); //Capitura o texto a ser enviado
            dout.writeUTF(msgout); //Envia para o servidor o nome do cliente da sessão e o texto
            msg_area.setText(msg_area.getText().trim() + "\n" + msgout); //Escreve na tela do cliente a mensagem enviada
            msg_text.setText(""); //Limpa a caixa de texto de envio
            msg_text.setText(""); //Limpa a caixa de texto de envio
        } catch (NullPointerException e) { //Tratamento de erros do evento
            msg_area.setText(msg_area.getText().trim() + "\n" + "Erro: Algum metodo nao iniciado - " + e); //Captura de erro padrão
        } catch (UTFDataFormatException e) { //Tratamento de erros do enviado
            msg_area.setText(msg_area.getText().trim() + "\n" + "Erro: Texto muito longo - " + e); //Captura de erro padrão
        } catch (Exception e) { //Tratamento de erros do enviado
            msg_area.setText(msg_area.getText().trim() + "\n" + "Erro(1): " + e); //Captura de erro padrão
        }
    }//GEN-LAST:event_msg_sendActionPerformed

    private void msg_textKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_msg_textKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == evt.VK_ENTER) { //Caso seja apertado a tecla Enter na caixa de texto de envio
            try {
                msg_send.doClick(); //Botão que realiza o envio é "clicado" caso seja apertado Enter na caixa de texto de envio
            } catch (Exception e) { //Tratamento de erros do evento
                msg_area.setText(msg_area.getText().trim() + "\n" + "Erro(2): " + e); //Captura de erro padrão
            }
        }
    }//GEN-LAST:event_msg_textKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(chat_server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(chat_server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(chat_server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(chat_server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new chat_server().setVisible(true);
            }
        });
        String msgin = "";
        try {
            ss = new ServerSocket(12345); //Porta que o sevidor ira usar
            s = ss.accept(); //Liberando conexões externas ao servidor
            msg_area.setText("Servidor iniciado com sucesso!\n" + ips); //
            din = new DataInputStream(s.getInputStream()); //Inicia a metodo de entrada de dados
            dout = new DataOutputStream(s.getOutputStream()); //Inicia a metodo de saida de dados
            while (!msgin.equals("exit")) {
                msgin = din.readUTF(); //Le o que o servidor envia
                msg_area.setText(msg_area.getText().trim() + "\n" + msgin); //Escreve na tela o que o servidor enviou
            }
        } catch (Exception e) { //Tratamento de erro ao tentar se conectar ao servidor 
            msg_area.setText(msg_area.getText().trim() + "\n" + "Erro(3): " + e);
        }

    }

    private static String myip() { //Metodo de busca de ip publico e local
        //Procurando Ip local
        String iplocal = ""; //Iniciando e limpando variavel que ira receber ip local
        try {
            InetAddress endlocal = InetAddress.getLocalHost(); //Identifica o ip local da maquina 
            iplocal = (endlocal.getHostAddress()).trim(); //Escreve na variavel o ip que é retornado 
        } catch (Exception e) { //Tratamento de erro padrão ao tentar encontrar ip local
            msg_area.setText(msg_area.getText().trim() + "\n" + "Erro(4): " + e); //Captura de erro padrão
        }

        //Procurando Ip publico
        String ippublico = ""; //Iniciando e limpando variavel que ira receber ip publico
        try {
            URL url_name = new URL("http://bot.whatismyipaddress.com"); //Criando um link com o site que ira retornar o ip publico
            BufferedReader sc = new BufferedReader(new InputStreamReader(url_name.openStream())); //Inicia o buffer para registrar o ip retornado pelo site
            ippublico = sc.readLine().trim(); //Le o ip publico
        } catch (Exception e) { //Tratamento de erro padrão ao tentar encontrar ip publico
            msg_area.setText(msg_area.getText().trim() + "\n" + "Erro(5): " + e); //Captura de erro padrão
        }

        //Criando texto para ser retornado a variavel global 
        String resultado = "IP local: " + iplocal + "\n"
                + "IP publico: " + ippublico;
        return resultado; //Retornando o resultado em forma de texto para ser atribuido a varialvel 
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private static javax.swing.JTextArea msg_area;
    private javax.swing.JButton msg_send;
    private javax.swing.JTextField msg_text;
    // End of variables declaration//GEN-END:variables
}
